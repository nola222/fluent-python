# -*- coding: utf-8 -*-
# Nola
"""
    字典中的散列表
        散列表其实是一个稀疏数组(总是有空白元素的数组称为稀疏数组)。
        一般数据结构教材中，散列表里的单元通常叫做表元(bucket)。
        dict散列表中，每个键值对都占用一个表元，每个表元有两个部分，一个是对键的引用，一个是对值的引用。
"""

a = 1
b = 1.0
print(a == b)  # 两个对象比较时时相等的 整型和浮点内部结构是完全一样的  如果一个整型对象，他能被存进一个机器字中，它的散列值就是它本身的值。
print(hash(a) == hash(b))  # 两个对象的散列值一定相等， 否则散列表不能正常运行
print(hash(1.0001))  # 理想状况下，越是相似的但不相等的对象，散列值的差别越大。
print(hash(1.0002))
print(hash(1.0003))

"""
    从Python3.3开始，str、bytes和datetime对象的散列值计算过程多了随机的“加盐”这一步。
    加盐值时Python进程内的一个常量，每次启动Python解释器都会生成一个不同的盐值，防止DOS攻击采取的一种安全措施。
    
    散列表算法：
    
    -------------                            ---------------------------------
    |计算键的散列值|                            |使用散列值另一部分来定位散列表的另一行|
    -------------                            ---------------------------------
                                                                  |||||
          ↓                            ↙                 ↑     ||| 散列 |||
                                                               |||     |||                                                         
    ----------------              -                      -     ||| 冲突 ||| 
    |使用散列值的一部分|           -     -                -    -      |||||
    |来定位散列表中的  |   →    - 表元为空？ -     →      - 键相等？-
    |一个表元        |           -     -       否       -     -
    ----------------              -                      -
                                 
                                  ↓是                    ↓是
                            ----------------        --------------    
                            |抛出异常KeyError|        |返回表元里的值|   
                            ----------------        --------------
"""